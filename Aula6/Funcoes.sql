CREATE TABLE time (
id INTEGER PRIMARY KEY,
nome VARCHAR(50)
);
CREATE TABLE partida (
id INTEGER PRIMARY KEY,
time_1 INTEGER,
time_2 INTEGER,
time_1_gols INTEGER,
time_2_gols INTEGER,
FOREIGN KEY(time_1) REFERENCES time(id),
FOREIGN KEY(time_2) REFERENCES time(id)
);
INSERT INTO time(id, nome) VALUES
(1,'CORINTHIANS'),
(2,'SÃO PAULO'),
(3,'CRUZEIRO'),
(4,'ATLETICO MINEIRO'),
(5,'PALMEIRAS');
INSERT INTO partida(id, time_1, time_2, time_1_gols, time_2_gols)
VALUES
(1,4,1,0,4),
(2,3,2,0,1),
(3,1,3,3,0),
(4,3,4,0,1),
(5,1,2,0,0),
(6,2,4,2,2),
(7,1,5,1,2),
(8,5,2,1,2);

-- Função
-- Funções: são blocos de codigo que podem ser chamados para executar uma tarefa especifica.
-- As funções aceitam parametros.
-- As funções podem ser definidas pelo usuario ou podem ser chamadas as funções embutidas
-- Funções são as que estão disponiveis no banco de dados
-- são 3 tipos de funções: Matematicas, as Datas e as de String



-- Funções Matematicas
-- Exemplos:
SELECT ABS(-10); -- ELA RETORNA O VALOR ABSOLUTO DO NUMERO
SELECT ROUND(10.5); -- ELE ARREDONDA PARA O NUMERO INTEIRO MAIS PROXIMO
SELECT TRUNC(12.73543); -- ELE PEGA SOMENTE A PARTE INTEIRA DO NUMERO (SOMENTE NO POSTGRES)
SELECT POWER(2, 3); -- RETORNA OS VALORES EXPONENCIAIS DELIMITADOS
SELECT LN(4); -- RETORNA O LOGARITIMO NATURAL DO NUMERO
SELECT COS(30); -- RETORNA O COSSENO DO ANGULO RADIANO
SELECT ATAN(0.5); -- RETORNA O ARCO DA TANGENTE
SELECT ASINH(0.5); -- RETORNA O ARCO DO SENO HIPERBOLICO (POSTGRES)
SELECT SIGN(50); -- RETORNA O SINAL DO NUMERO



-- FUNÇÕES EMBUTIDAS DE MANIPULAÇÃO DE STRING
SELECT CONCAT('AFASF', 'FAS'); -- VAI CONCATENAR AS 2 STRINGS
SELECT LENGTH('ASDASF'); -- RETORNA O COMPRIMENTO
SELECT LOWER('GSD'); -- DEIXA TUDO MINUSCULO
SELECT UPPER('GSD'); -- DEIXA TUDO MAIUSCULO
SELECT LTRIM(' EGADG'); -- EXCLUI OS ESPAÇOS DA ESQUERDA
SELECT RTRIM('EGADG '); -- EXCLUI OS ESPAÇOS DA DIREITA
SELECT LPAD('EGEGE', 10, '*'); -- PREENCHE UM STRING COM AS CARACTERES APRESENTADAS PARA ESQUERDA
SELECT RPAD('EGEGE', 10, '*'); -- PREENCHE UM STRING COM AS CARACTERES APRESENTADAS PARA DIREITA
SELECT REVERSE('FAFWAD'); -- INVERTE



-- FUNÇÕES DA DATA
SELECT CURRENT_DATE; -- SELECIONA A DATA DO PC
SELECT EXTRACT(YEAR FROM CURRENT_DATE); -- PEGA SOMENTE O ANO
SELECT EXTRACT(DAY FROM CURRENT_DATE); -- PEGA SOMENTE O DIA
SELECT AGE('02-02-2025', '01-01-2025'); -- MOSTRA A DIFERENÇA ENTRE DUAS DATAS
SELECT INTERVAL '1 DAY'; -- RETORNA O INTERVALO


-- FUNÇÕES DEFINIDA PELO USUARIO:

-- (POSTGRES)
CREATE FUNCTION SOMA(A INTEGER, B INTEGER) RETURNS INTEGER AS $$ -- VARIAVEL, TIPO E O RETORNO
BEGIN -- COMEÇO A FUNÇÃO
    -- CORPO DA FUNÇÃO
    RETURN A + B;
END;
$$ LANGUAGE PLPGSQL


-- (MYSQL)
CREATE FUNCTION SOMA(A INTEGER, B INTEGER) RETURNS INTEGER AS -- VARIAVEL, TIPO E O RETORNO
DETERMINISTIC -- É UMA CLAUSULA OPCIONAL
BEGIN -- COMEÇO A FUNÇÃO
    -- CORPO DA FUNÇÃO
    RETURN A + B;
END;

-- CHAMAR A FUNÇÃO
SELECT SOMA(10, 20);

-- OPERAÇÃO DE INSERT NAS FUNÇÕES
CREATE OR REPLACE FUNCTION INSERE_PARTIDA (ID INTEGER,TIME_1 INTEGER, TIME_2 INTEGER, time_1_gols INTEGER, time_2_gols INTEGER) RETURNS VOID AS $$
BEGIN
    INSERT INTO PARTIDA(ID, time_1, time_2, time_1_gols, time_2_gols) VALUES (ID, time_1, time_2, time_1_gols, time_2_gols);
END;
$$ LANGUAGE PLPGSQL

-- CHAMANDO
SELECT INSERE_PARTIDA(10,1,2,1,2);

-- FUNÇÃO DE CONSULTA
CREATE OR REPLACE FUNCTION CONSULTA_TIME() RETURNS SETOF TIME AS $$ -- SETOF INDICA QUE A FUNÇÃO RETORNA UM CONJUNTO DE REGISTROS
BEGIN
    RETURN QUERY SELECT * FROM TIME;
END;
$$ LANGUAGE PLPGSQL

-- CHAMANDO
SELECT * FROM CONSULTA_TIME();



-- FUNÇÃO COM VARIAVEL INTERNA
CREATE OR REPLACE FUNCTION CONSULTA_VENCEDOR_POR_TIME(ID_TIME INTEGER) RETURNS VARCHAR(50) AS $$
DECLARE
    vencedor VARCHAR(50);
BEGIN
    SELECT CASE
        WHEN time_1_gols > time_2_gols THEN(SELECT NOME FROM TIME WHERE ID = TIME_1)
        WHEN time_1_gols < time_2_gols THEN(SELECT NOME FROM TIME WHERE ID = TIME_2)
        ELSE 'EMPATE'
        END INTO vencedor
        FROM PARTIDA
        WHERE TIME_1 = ID_TIME OR TIME_2 = ID_TIME;
        RETURN vencedor;
END;
$$ LANGUAGE PLPGSQL


-- OPERAÇÕES NAS FUNÇÕES NO POSTGRES

-- 1. CRIAR VARIAVEIS DENTRO DA FUNÇÃO E IMPRIMIR
CREATE OR REPLACE FUNCTION OPERACAO_FUNCAO() 
RETURNS VOID AS $$
DECLARE -- DECLARE É PARA DECLARAR E CRIAR AS VARIÁVEIS INTERNAS
    V_ID INTEGER;
    V_NOME VARCHAR(50);
BEGIN
    -- ATRIBUINDO VALORES ÀS VARIÁVEIS
    V_ID := 1;
    V_NOME := 'CORINTHIANS';
    RAISE NOTICE 'ID: %, NOME: %', V_ID, V_NOME;

    -- OPERAÇÃO MATEMATICA
    V_ID := V_ID + 1;
    RAISE NOTICE 'SOMA: %', 1 + 1;
    RAISE NOTICE 'SUBTRAÇÃO: %', 1 - 1;
    RAISE NOTICE 'MULTIPLICAÇÃO: %', 1 * 1;
    RAISE NOTICE 'DIVISÃO: %', 1 / 1;

    -- OPERAÇÕES DE COMPARAÇÃO
    RAISE NOTICE 'MAIOR: %', 1 > 1;
    RAISE NOTICE 'MAIOR OU IGUAL: %', 1 >= 1;
    RAISE NOTICE 'MENOR: %', 1 < 1;
    RAISE NOTICE 'MENOR OU IGUAL: %', 1 <= 1;
    RAISE NOTICE 'IGUAL: %', 1 = 1;
    RAISE NOTICE 'DIFERENTE: %', 1 <> 1;

    -- OPERAÇÕES DE LOGICA
    RAISE NOTICE 'E: %', TRUE AND TRUE;
    RAISE NOTICE 'OU: %', TRUE OR FALSE;
    RAISE NOTICE 'NÃO: %', NOT TRUE;

    -- MANIPULAÇÃO DE STRING
    RAISE NOTICE 'TAMANHO DA STRING: %', LENGTH('AULA DIGIX');
    RAISE NOTICE 'SUBSTITUIR: %', REPLACE('AULA DIGIX', 'DIGIX', 'POSTGRES');
    RAISE NOTICE 'POSIÇÃO: %', POSITION('DIGIX' IN 'AULA DIGIX');
    RAISE NOTICE 'SUB STRING: %', SUBSTRING('AULA DIGIX', 6, 5);
    RAISE NOTICE 'MAIUSCULA: %', UPPER('AULA DIGIX');
    RAISE NOTICE 'MINUSCULA: %', LOWER('AULA DIGIX');

    -- MANIPULAÇÃO DE DATA
    RAISE NOTICE 'DATA ATUAL: %', NOW();
    RAISE NOTICE 'DATA ATUAL: %', CURRENT_DATE;
    RAISE NOTICE 'HORA ATUAL: %', CURRENT_TIME; -- HORA

    -- MANIPULAÇÃO DE ARRAY
    RAISE NOTICE 'ARRAY: %', ARRAY[1,2,3,4,5];
    RAISE NOTICE 'ARRAY: %', ARRAY['AULA', 'DIGIX'];
    -- RAISE NOTICE 'ARRAY: %', ARRAY['AULA', 1, TRUE]; NÃO É POSSIVEL CRIAR UM ARRAY COM TIPOS DIFERENTES
    RAISE NOTICE 'MATRIZ: %', ARRAY[[1,2,3],[4,5,6]];
    RAISE NOTICE 'MATRIZ TRIDIMENCIONAL: %', ARRAY[[[1,2,3],[4,5,6],[7,8,9],[10,11,12]]];

    -- MANIPULAÇÃO DE JSON
    RAISE NOTICE 'JSON: %', '{"NOME": "AULA DIGIX"}';
END;
$$ LANGUAGE PLPGSQL;

SELECT OPERACAO_FUNCAO();



-- 2. CRIAR UMA FUNÇÃO QUE RECEBE PARAMETROS E RETORNA UM VALOR
CREATE OR REPLACE FUNCTION OBTER_NOME_TIME(P_ID INTEGER) RETURNS
VARCHAR AS $$
DECLARE
    V_NOME VARCHAR(50);
BEGIN
    SELECT NOME INTO V_NOME FROM TIME WHERE ID = P_ID;
    RETURN V_NOME;
END;
$$ LANGUAGE PLPGSQL;

SELECT OBTER_NOME_TIME(1);


-- 3. CRIAR FUNÇÃO COM LOOPS
CREATE OR REPLACE FUNCTION OBTER_TIMES() RETURNS SETOF TIME AS $$
DECLARE
    I INTEGER := 1;
BEGIN
    LOOP -- É EQUIVALENTE AO WHILE
        EXIT WHEN I > 5; -- EXIT É QUANDO A CONDIÇÃO FOR VERDADEIRA
        RAISE NOTICE 'VALOR DE I: %', I;
        I := I + 1;
    END LOOP;
END;
$$ LANGUAGE PLPGSQL;

-- OU USANDO FOR OU WHILE

CREATE OR REPLACE FUNCTION OBTER_TIMES() RETURNS SETOF TIME AS $$
DECLARE
    I INTEGER := 1;
BEGIN
    FOR I IN 1..5 LOOP -- COLOCA 2 PONTOS PARA INDICAR O INTERVALO, INICIO E FIM
        RAISE NOTICE 'VALOR DE I: %', I;
    END LOOP

    WHILE I <= 5 LOOP
        RAISE NOTICE 'VALOR DE I: %', I;
        I := I + 1;
    END LOOP
END;
$$ LANGUAGE PLPGSQL;

SELECT OBTER_TIMES();

-- 4. CRIAR FUNÇÃO QUE PERCORRE UMA TABELA USANDO RETURN NEXT
CREATE OR REPLACE FUNCTION OBTER_TIMES_DADOS() RETURNS SETOF TIME AS $$
DECLARE
    V_TIME TIME%ROWTYPE; -- %ROWTYPE É PARA PEGAR O TIPO DA VARIAVEL DA TABELA
BEGIN
    FOR V_TIME IN SELECT * FROM TIME LOOP -- AQUI ESTAMOS PERCORRENDO TODOS OS REGISTROS DA TABELA
        RETURN NEXT V_TIME; -- RETURN NEXT É PARA RETORNAR O VALOR DA VARIAVEL
    END LOOP;
END;
$$ LANGUAGE PLPGSQL;

SELECT OBTER_TIMES_DADOS();

-- 5. FUNÇÃO QUE TRABALHA CONDIÇÕES
CREATE OR REPLACE FUNCTION GOLS() RETURNS SETOF TIME AS $$
DECLARE
    V_GOLS INTEGER;
BEGIN
    SELECT time_1_gols INTO V_GOLS FROM PARTIDA WHERE ID = 1;
    IF V_GOLS > 2 THEN
        RAISE NOTICE 'TIME MARCOU MAIS DE 2 GOLS';
    ELSE
        RAISE NOTICE 'TIME MARCOU MENOS DE 2 GOLS';
    END IF;
END;
$$ LANGUAGE PLPGSQL;

SELECT GOLS();

-- OU COM CASE
CREATE OR REPLACE FUNCTION GOLS() RETURNS SETOF TIME AS $$
DECLARE
    V_GOLS INTEGER;
    BEGIN
        SELECT time_1_gols INTO V_GOLS FROM PARTIDA WHERE ID = 1;
        CASE
            WHEN V_GOLS > 2 THEN
                RAISE NOTICE 'TIME MARCOU MAIS DE 2 GOLS';
            ELSE
                RAISE NOTICE 'TIME MARCOU MENOS DE 2 GOLS';
        END CASE;
    END;
$$ LANGUAGE PLPGSQL;

SELECT GOLS();

-- 6. FUNÇÃO QUE TRATA EXCEÇÕES
CREATE OR REPLACE FUNCTION OBTER_NOME_TIME_EXCECAO(ID_TIME INTEGER) RETURNS VARCHAR AS $$
DECLARE
    V_NOME VARCHAR(50);
BEGIN
    SELECT NOME INTO V_NOME FROM TIME WHERE ID = ID_TIME;
    RETURN V_NOME;
    EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RAISE NOTICE 'NENHUM REGISTRO ENCONTRADO';
END;
$$ LANGUAGE PLPGSQL;

SELECT OBTER_NOME_TIME_EXCECAO(3);