CREATE TABLE FILME (
    ID_FILME INTEGER PRIMARY KEY NOT NULL,
    NOMEBR VARCHAR(45),
    NOMEEN VARCHAR(45),
    ANOLANCAMENTO INTEGER,
    DIRETOR_IDDIRETOR INTEGER,
    SINOPSE TEXT,
    GENERO_IDGENERO INTEGER
);
ALTER TABLE FILME 
ADD CONSTRAINT FK_DIRETOR FOREIGN KEY (DIRETOR_IDDIRETOR) REFERENCES DIRETOR(IDDIRETOR);
ALTER TABLE FILME 
ADD CONSTRAINT FK_GENERO FOREIGN KEY (GENERO_IDGENERO) REFERENCES GENERO(IDGENERO);

CREATE TABLE DIRETOR (
    IDDIRETOR INTEGER PRIMARY KEY NOT NULL,
    NOME VARCHAR(45)
);

CREATE TABLE GENERO (
    IDGENERO INTEGER PRIMARY KEY NOT NULL,
    NOME VARCHAR(45)
);

CREATE TABLE PREMIACAO (
    IDPREMIACAO INTEGER PRIMARY KEY NOT NULL,
    NOME VARCHAR(45),
    ANO INTEGER
);

CREATE TABLE FILME_HAS_PREMIACAO (
    FILME_ID_FILME INTEGER NOT NULL,
    PREMIACAO_IDPREMIACAO INTEGER NOT NULL,
    GANHOU BOOL;
    CONSTRAINT FK_FILME FOREIGN KEY (FILME_ID_FILME) REFERENCES FILME(ID_FILME),
    CONSTRAINT FK_PREMIACAO FOREIGN KEY (PREMIACAO_IDPREMIACAO) REFERENCES PREMIACAO(IDPREMIACAO)
);

CREATE TABLE FUNCAO (
    IDFUNCAO INTEGER PRIMARY KEY NOT NULL,
    NOME VARCHAR(45)
);

CREATE TABLE FUNCIONARIO (
    IDFUNCIONARIO INTEGER PRIMARY KEY NOT NULL,
    NOME VARCHAR(45),
    CARTEIRATRABALHO INTEGER,
    DATACONTRATACAO DATE,
    SALARIO FLOAT
);

CREATE TABLE HORARIO (
    IDHORARIO INTEGER PRIMARY KEY NOT NULL,
    HORARIO TIME
);

CREATE TABLE HORARIO_TRABALHO_FUNCIONARIO (
    HORARIO_IDHORARIO INTEGER NOT NULL,
    FUNCIONARIO_IDFUNCIONARIO INTEGER NOT NULL,
    FUNCAO_IDFUNCAO INTEGER NOT NULL,
    CONSTRAINT FK_HORARIO FOREIGN KEY (HORARIO_IDHORARIO) REFERENCES HORARIO(IDHORARIO),
    CONSTRAINT FK_FUNCAO FOREIGN KEY (FUNCAO_IDFUNCAO) REFERENCES FUNCAO(IDFUNCAO),
    CONSTRAINT FK_FUNCIONARIO FOREIGN KEY (FUNCIONARIO_IDFUNCIONARIO) REFERENCES FUNCIONARIO(IDFUNCIONARIO)
);

CREATE TABLE SALA (
    IDSALA INTEGER PRIMARY KEY NOT NULL,
    NOME VARCHAR(45),
    CAPACIDADE INTEGER
);

CREATE TABLE FILME_EXIBIDO_SALA (
    FILME_ID_FILME INTEGER NOT NULL,
    SALA_IDSALA INTEGER NOT NULL,
    HORARIO_IDHORARIO INTEGER NOT NULL,
    CONSTRAINT FK_FILME FOREIGN KEY (FILME_ID_FILME) REFERENCES FILME(ID_FILME),
    CONSTRAINT FK_SALA FOREIGN KEY (SALA_IDSALA) REFERENCES SALA(IDSALA),
    CONSTRAINT FK_HORARIO FOREIGN KEY (HORARIO_IDHORARIO) REFERENCES HORARIO(IDHORARIO)
);

-- POVOANDO
-- Inserindo dados na tabela DIRETOR
INSERT INTO DIRETOR (IDDIRETOR, NOME) VALUES (1, 'Christopher Nolan');
INSERT INTO DIRETOR (IDDIRETOR, NOME) VALUES (2, 'Quentin Tarantino');
INSERT INTO DIRETOR (IDDIRETOR, NOME) VALUES (3, 'Steven Spielberg');
INSERT INTO DIRETOR (IDDIRETOR, NOME) VALUES (4, 'Martin Scorsese');
INSERT INTO DIRETOR (IDDIRETOR, NOME) VALUES (5, 'James Cameron');

-- Inserindo dados na tabela GENERO
INSERT INTO GENERO (IDGENERO, NOME) VALUES (1, 'Ação');
INSERT INTO GENERO (IDGENERO, NOME) VALUES (2, 'Drama');
INSERT INTO GENERO (IDGENERO, NOME) VALUES (3, 'Ficção Científica');
INSERT INTO GENERO (IDGENERO, NOME) VALUES (4, 'Terror');
INSERT INTO GENERO (IDGENERO, NOME) VALUES (5, 'Comédia');

-- Inserindo dados na tabela FILME
INSERT INTO FILME (ID_FILME, NOMEBR, NOMEEN, ANOLANCAMENTO, DIRETOR_IDDIRETOR, SINOPSE, GENERO_IDGENERO) VALUES (1, 'A Origem', 'Inception', 2010, 1, 'Um ladrão invade sonhos para roubar segredos.', 3);
INSERT INTO FILME (ID_FILME, NOMEBR, NOMEEN, ANOLANCAMENTO, DIRETOR_IDDIRETOR, SINOPSE, GENERO_IDGENERO) VALUES (2, 'Pulp Fiction', 'Pulp Fiction', 1994, 2, 'Histórias interligadas de violência e redenção.', 2);
INSERT INTO FILME (ID_FILME, NOMEBR, NOMEEN, ANOLANCAMENTO, DIRETOR_IDDIRETOR, SINOPSE, GENERO_IDGENERO) VALUES (3, 'Jurassic Park', 'Jurassic Park', 1993, 3, 'Dinossauros trazidos de volta à vida.', 3);
INSERT INTO FILME (ID_FILME, NOMEBR, NOMEEN, ANOLANCAMENTO, DIRETOR_IDDIRETOR, SINOPSE, GENERO_IDGENERO) VALUES (4, 'O Lobo de Wall Street', 'The Wolf of Wall Street', 2013, 4, 'A ascensão e queda de um corretor da bolsa.', 2);
INSERT INTO FILME (ID_FILME, NOMEBR, NOMEEN, ANOLANCAMENTO, DIRETOR_IDDIRETOR, SINOPSE, GENERO_IDGENERO) VALUES (5, 'Avatar', 'Avatar', 2009, 5, 'Exploração de um mundo alienígena.', 3);

-- Inserindo dados na tabela PREMIACAO
INSERT INTO PREMIACAO (IDPREMIACAO, NOME, ANO) VALUES (1, 'Oscar', 2010);
INSERT INTO PREMIACAO (IDPREMIACAO, NOME, ANO) VALUES (2, 'Globo de Ouro', 2011);
INSERT INTO PREMIACAO (IDPREMIACAO, NOME, ANO) VALUES (3, 'BAFTA', 2009);
INSERT INTO PREMIACAO (IDPREMIACAO, NOME, ANO) VALUES (4, 'Cannes', 1994);
INSERT INTO PREMIACAO (IDPREMIACAO, NOME, ANO) VALUES (5, 'Grammy', 2020);

-- Inserindo dados na tabela FILME_HAS_PREMIACAO
INSERT INTO FILME_HAS_PREMIACAO (FILME_ID_FILME, PREMIACAO_IDPREMIACAO, GANHOU) VALUES (1, 1, TRUE);
INSERT INTO FILME_HAS_PREMIACAO (FILME_ID_FILME, PREMIACAO_IDPREMIACAO, GANHOU) VALUES (2, 2, TRUE);
INSERT INTO FILME_HAS_PREMIACAO (FILME_ID_FILME, PREMIACAO_IDPREMIACAO, GANHOU) VALUES (3, 3, FALSE);
INSERT INTO FILME_HAS_PREMIACAO (FILME_ID_FILME, PREMIACAO_IDPREMIACAO, GANHOU) VALUES (4, 4, TRUE);
INSERT INTO FILME_HAS_PREMIACAO (FILME_ID_FILME, PREMIACAO_IDPREMIACAO, GANHOU) VALUES (5, 5, FALSE);

-- Inserindo dados na tabela FUNCAO
INSERT INTO FUNCAO (IDFUNCAO, NOME) VALUES (1, 'Bilheteiro');
INSERT INTO FUNCAO (IDFUNCAO, NOME) VALUES (2, 'Projecionista');
INSERT INTO FUNCAO (IDFUNCAO, NOME) VALUES (3, 'Zelador');
INSERT INTO FUNCAO (IDFUNCAO, NOME) VALUES (4, 'Gerente');
INSERT INTO FUNCAO (IDFUNCAO, NOME) VALUES (5, 'Atendente');

-- Inserindo dados na tabela FUNCIONARIO
INSERT INTO FUNCIONARIO (IDFUNCIONARIO, NOME, CARTEIRATRABALHO, DATACONTRATACAO, SALARIO) VALUES (1, 'Carlos Silva', 12345, '2020-01-15', 2500.00);
INSERT INTO FUNCIONARIO (IDFUNCIONARIO, NOME, CARTEIRATRABALHO, DATACONTRATACAO, SALARIO) VALUES (2, 'Mariana Souza', 23456, '2019-06-10', 3200.00);
INSERT INTO FUNCIONARIO (IDFUNCIONARIO, NOME, CARTEIRATRABALHO, DATACONTRATACAO, SALARIO) VALUES (3, 'João Pereira', 34567, '2021-03-20', 1800.00);
INSERT INTO FUNCIONARIO (IDFUNCIONARIO, NOME, CARTEIRATRABALHO, DATACONTRATACAO, SALARIO) VALUES (4, 'Ana Costa', 45678, '2018-12-01', 4000.00);
INSERT INTO FUNCIONARIO (IDFUNCIONARIO, NOME, CARTEIRATRABALHO, DATACONTRATACAO, SALARIO) VALUES (5, 'Pedro Lima', 56789, '2022-07-15', 2700.00);

-- Inserindo dados na tabela HORARIO
INSERT INTO HORARIO (IDHORARIO, HORARIO) VALUES (1, '08:00:00');
INSERT INTO HORARIO (IDHORARIO, HORARIO) VALUES (2, '12:00:00');
INSERT INTO HORARIO (IDHORARIO, HORARIO) VALUES (3, '16:00:00');
INSERT INTO HORARIO (IDHORARIO, HORARIO) VALUES (4, '20:00:00');
INSERT INTO HORARIO (IDHORARIO, HORARIO) VALUES (5, '22:00:00');

-- Inserindo dados na tabela SALA
INSERT INTO SALA (IDSALA, NOME, CAPACIDADE) VALUES (1, 'Sala 1', 100);
INSERT INTO SALA (IDSALA, NOME, CAPACIDADE) VALUES (2, 'Sala 2', 150);
INSERT INTO SALA (IDSALA, NOME, CAPACIDADE) VALUES (3, 'Sala 3', 200);
INSERT INTO SALA (IDSALA, NOME, CAPACIDADE) VALUES (4, 'Sala 4', 120);
INSERT INTO SALA (IDSALA, NOME, CAPACIDADE) VALUES (5, 'Sala 5', 180);

-- Inserindo associações entre funcionários, horários e funções
INSERT INTO HORARIO_TRABALHO_FUNCIONARIO (HORARIO_IDHORARIO, FUNCIONARIO_IDFUNCIONARIO, FUNCAO_IDFUNCAO) VALUES 
(1, 1, 1),
(2, 2, 2),
(3, 3, 3),
(4, 4, 4),
(5, 5, 5); 

-- 1 Retornar a média dos salários dos funcionários.
SELECT AVG(SALARIO) FROM funcionario;

-- 2 Listar os funcionários e suas funções, incluindo aqueles sem função definida.
SELECT F.NOME AS FUNCIONARIO, FU.NOME AS FUNCAO
FROM FUNCIONARIO F
JOIN HORARIO_TRABALHO_FUNCIONARIO HT ON F.IDFUNCIONARIO = HT.FUNCIONARIO_IDFUNCIONARIO
JOIN FUNCAO FU ON HT.FUNCAO_IDFUNCAO = FU.IDFUNCAO;


-- 3 Retornar o nome de todos os funcionários que possuem o mesmo horário de trabalho que algum outro funcionário.
SELECT H.HORARIO, STRING_AGG(F.NOME, ', ') AS FUNCIONARIOS
FROM HORARIO_TRABALHO_FUNCIONARIO HT
JOIN FUNCIONARIO F 
  ON HT.FUNCIONARIO_IDFUNCIONARIO = F.IDFUNCIONARIO
JOIN HORARIO H 
  ON HT.HORARIO_IDHORARIO = H.IDHORARIO
GROUP BY H.HORARIO
HAVING COUNT(HT.FUNCIONARIO_IDFUNCIONARIO) > 1;

-- 4 Encontrar filmes que foram exibidos em pelo menos duas salas diferentes.
SELECT F.NOMEBR AS FILME_BRA, F.NOMEEN AS FILME_ENG, COUNT(DISTINCT FE.SALA_IDSALA) AS NUM_SALAS
FROM FILME_EXIBIDO_SALA FE
JOIN FILME F ON FE.FILME_ID_FILME = F.ID_FILME
GROUP BY F.ID_FILME
HAVING COUNT(DISTINCT FE.SALA_IDSALA) > 1;

-- 5 Listar os filmes e seus respectivos gêneros, garantindo que não haja duplicatas.
SELECT F.NOMEBR AS FILME_BRA, F.NOMEEN AS FILME_ENG, G.NOME AS GENERO
FROM FILME F
JOIN GENERO G ON F.GENERO_IDGENERO = G.IDGENERO;

-- 6 Encontrar os filmes que receberam prêmios e que tiveram exibição em pelo menos uma sala.
SELECT F.NOMEBR AS FILME_BRA, F.NOMEEN AS FILME_ENG
FROM FILME F
JOIN filme_has_premiacao FH ON F.id_filme = FH.filme_id_filme
WHERE FH.ganhou = TRUE;

-- 7 Listar os filmes que não receberam nenhum prêmio.
SELECT F.NOMEBR AS FILME_BRA, F.NOMEEN AS FILME_ENG
FROM FILME F
JOIN filme_has_premiacao FH ON F.id_filme = FH.filme_id_filme
WHERE FH.ganhou = FALSE;

-- 8 Exibir os diretores que dirigiram pelo menos dois filmes.
SELECT D.NOME AS DIRETOR
FROM diretor D
JOIN FILME F ON F.diretor_iddiretor = D.iddiretor
GROUP BY D.NOME
HAVING COUNT(F.ID_FILME) > 1;

-- 9 Listar os funcionários e os horários que trabalham, ordenados pelo horário mais cedo.
SELECT F.NOME, H.HORARIO
FROM funcionario F, horario H
JOIN horario_trabalho_funcionario HT ON H.IDHORARIO = HT.HORARIO_IDHORARIO
WHERE HT.FUNCIONARIO_IDFUNCIONARIO = F.IDFUNCIONARIO
ORDER BY H.HORARIO ASC;

-- 10 Listar os filmes que foram exibidos na mesma sala em horários diferentes.
SELECT F.NOMEBR AS FILME_PT, F.NOMEEN AS FILME_EN, S.NOME AS SALA, COUNT(DISTINCT H.HORARIO) AS NUMERO_DE_HORARIOS
FROM filme_exibido_sala FE
JOIN FILME F ON FE.FILME_ID_FILME = F.ID_FILME
JOIN SALA S ON FE.SALA_IDSALA = S.IDSALA
JOIN HORARIO H ON FE.HORARIO_IDHORARIO = H.IDHORARIO
GROUP BY F.ID_FILME, S.IDSALA
HAVING COUNT(DISTINCT H.HORARIO) > 1;

-- 11 Unir os diretores e os funcionários em uma única lista de pessoas.
SELECT F.NOME AS LISTAPESSOAS
FROM funcionario F
UNION
SELECT D.NOME AS LISTAPESSOAS
FROM diretor D;

-- 12 Exibir todas as funções diferentes que os funcionários exercem e a quantidade de funcionários em cada uma.
SELECT FU.NOME AS FUNCAO, COUNT(DISTINCT HT.FUNCIONARIO_IDFUNCIONARIO) AS QUANTIDADE_FUNCIONARIOS
FROM HORARIO_TRABALHO_FUNCIONARIO HT
JOIN FUNCIONARIO F ON HT.FUNCIONARIO_IDFUNCIONARIO = F.IDFUNCIONARIO
JOIN FUNCAO FU ON HT.FUNCAO_IDFUNCAO = FU.IDFUNCAO
GROUP BY FU.NOME;

-- 13 Encontrar os filmes que foram exibidos em salas com capacidade superior à média de todas as salas.
SELECT F.NOMEBR AS FILME, S.NOME AS SALA, S.CAPACIDADE
FROM FILME_EXIBIDO_SALA FE
JOIN FILME F ON FE.FILME_ID_FILME = F.ID_FILME
JOIN SALA S ON FE.SALA_IDSALA = S.IDSALA
WHERE S.CAPACIDADE > (SELECT AVG(CAPACIDADE) FROM SALA)
ORDER BY S.CAPACIDADE DESC;

-- 14 Calcular o salário anual dos funcionários (considerando 12 meses).
SELECT F.NOME, F.SALARIO * 12 AS SALARIO_ANUAL
FROM FUNCIONARIO F;

-- 15 Exibir a relação entre a capacidade da sala e o número total de filmes exibidos nela.
SELECT S.NOME AS SALA, S.CAPACIDADE, COUNT(FE.FILME_ID_FILME) AS TOTAL_FILMES, (COUNT(FE.FILME_ID_FILME) / NULLIF(S.CAPACIDADE, 0)) AS FILMES_POR_ASSENTO
FROM SALA S
LEFT JOIN FILME_EXIBIDO_SALA FE ON S.IDSALA = FE.SALA_IDSALA
GROUP BY S.idsala, S.capacidade;
