--v
create table EMPREGADO (
	CPF int primary key not null,
	NOME varchar(50),
 	ENDERECO varchar(500),
    DATANASC date,
    SEXO char(1),
    CARTTRAB INTEGER,
    SALARIO decimal(10,2),
    NUMDEP INTEGER,
    CPFSUPER INTEGER
);
ALTER TABLE EMPREGADO 
ADD CONSTRAINT FK_CPFSUPER FOREIGN KEY (CPFSUPER) REFERENCES EMPREGADO(CPF);

ALTER TABLE EMPREGADO 
ADD CONSTRAINT FK_NUMDEP FOREIGN KEY (NUMDEP) REFERENCES DEPARTAMENTO(NUMDEP);

--v
CREATE TABLE DEPARTAMENTO (
    NUMDEP int primary key not null,
    NOMEDEP varchar(50),
    CPFGER INTEGER,
    DATAINICIOGER date
);

ALTER TABLE DEPARTAMENTO 
ADD CONSTRAINT FK_CPFGER FOREIGN KEY (CPFGER) REFERENCES EMPREGADO(CPF);

--v
CREATE TABLE PROJETO (
    NUMPROJ int primary key not null,
    NOMEPROJ varchar(50),
    LOCALIZACAO varchar(50),
    NUMDEP INTEGER,
    constraint FK_NUMD foreign key(NUMDEP)
    references DEPARTAMENTO(NUMDEP)
);
--v
CREATE TABLE DEPENDENTE (
    NOMEDEP INT PRIMARY KEY NOT NULL,
    CPFE INT,
    SEXO CHAR(1),
    PARENTESCO VARCHAR(50),
    CONSTRAINT FK_CPFE FOREIGN KEY (CPFE)
    REFERENCES EMPREGADO(CPF)
);
--v
CREATE TABLE TRABALHA_EM (
    CPFE INT,
    NUMPROJ INT,
    HORAS INT,
    CONSTRAINT FK_CPFE FOREIGN KEY (CPFE) REFERENCES EMPREGADO(CPF),
    CONSTRAINT FK_NUMPROJ FOREIGN KEY (NUMPROJ) REFERENCES PROJETO(NUMPROJ)
);

-- INSERIR DADOS
INSERT INTO DEPARTAMENTO VALUES (1, 'TI', NULL, '2020-01-01');
INSERT INTO DEPARTAMENTO VALUES (2, 'RH', NULL, '2020-01-01');
INSERT INTO DEPARTAMENTO VALUES (3, 'TI', NULL, '2020-01-01');

INSERT INTO EMPREGADO VALUES (1, 'Joao', 'Rua 1', '1990-01-01', 'M', 1, 1000, 1, 1);
INSERT INTO EMPREGADO VALUES (2, 'Maria', 'Rua 2', '1990-01-01', 'F', 2, 1000, 2, 1);
INSERT INTO EMPREGADO VALUES (3, 'Joao', 'Rua 1', '1990-01-01', 'M', 1, 1000, 3, 1);

-- FAZER UPDATE PARA ATUALIZAR O CPFGER DOS DEPARTAMENTOS
UPDATE DEPARTAMENTO SET CPFGER = 1 WHERE NUMDEP = 1;
UPDATE DEPARTAMENTO SET CPFGER = 2 WHERE NUMDEP = 2;
UPDATE DEPARTAMENTO SET CPFGER = 3 WHERE NUMDEP = 3;

INSERT into projeto VALUES (1, 'Projeto 1', 'SP', 1);
INSERT into projeto VALUES (2, 'Projeto 2', 'SP', 2);
INSERT into projeto VALUES (3, 'Projeto 3', 'SP', 3);

INSERT INTO dependente VALUES (1, 1, 'M', 'Filho');
INSERT INTO dependente VALUES (2, 2, 'F', 'Filha');
INSERT INTO dependente VALUES (3, 3, 'M', 'Filho');

INSERT INTO trabalha_em VALUES (1, 1, 8);
INSERT INTO trabalha_em VALUES (2, 2, 4);  
INSERT INTO trabalha_em VALUES (3, 3, 8);

-- CONSULTA DE TUDO
SELECT * FROM trabalha_em, departamento, dependente, projeto, empregado;

-- SUBSTRINGS, COM POSIÇÕES ESPECIFICAS DE CARACTERES
SELECT NOMEPROJ FROM projeto WHERE nomeproj LIKE 'P________';

-- DIFERENÇAS DE ASPAS SIMPLES E DUPLAS
-- AS SIMPLES PEGAM STRINGS
-- AS DUPLAS SÃO PARA IDENTIFICAR O NOME DA TABELA, COLUNA, ETC...
SELECT E.NOME FROM EMPREGADO E WHERE E.NOME LIKE 'J%';
SELECT "nome" FROM empregado WHERE "nome" LIKE 'J%';

-- OPERADORES MA PROPRIA COLUNA
SELECT E.NOME, E.SALARIO * 1.1 FROM EMPREGADO E;
-- COLOCAR NOME REFERENCIA NA OPERAÇÃO USANDO AS
SELECT E.NOME, E.SALARIO * 1.1 AS SalarioAtualizado FROM EMPREGADO E;

-- O USO DO DISTINCT É PARA EVITAR DUPLICAÇÕES
SELECT DISTINCT E.NOME, E.CPF FROM EMPREGADO E, trabalha_em T WHERE E.CPF = T.CPFE;

-- UTILIZAR UNION QUE É UNIÃO DE DUAS CONSULTAS
(SELECT DISTINCT NUMPROJ FROM PROJETO P, DEPARTAMENTO D, EMPREGADO E WHERE P.NUMDEP = D.NUMDEP AND D.CPFGER = E.CPF AND E.NOME = 'Joao') -- QUE ELE TA COMO GERENTE
UNION
(SELECT p.NUMPROJ FROM PROJETO P, EMPREGADO E, TRABALHA_EM T WHERE P.NUMPROJ = T.NUMPROJ AND T.CPFE = E.CPF AND E.NOME = 'Joao'); -- PROCURAR COMO APENAS EMPREGADO

-- USO DO INTERSECT
-- LISTANDO OS NOMES DOS EMPREGADOS QUE TAMBÉM SÃO GERENTES DE DEPARTAMENTO
SELECT E.NOME FROM empregado E
INTERSECT 
SELECT E.NOME FROM empregado E, departamento D WHERE D.cpfger = E.cpf;

-- UTILIZAR O IS NULL, PARA IMPRIMIR REGISTROS QUE TEM NULO EM CERTA COLUNA
SELECT E.NOME FROM empregado E WHERE E.cpfsuper IS NULL; -- QUE É NULO
SELECT E.NOME FROM empregado E WHERE E.cpfsuper IS NOT NULL; -- QUE É NÃO NULO

-- FUNÇÕES QUE JA ESTÃO NATIVAS
-- MEDIA DOS SALARIOS DOS EMPREGADOS
SELECT AVG(E.SALARIO) FROM EMPREGADO E;
-- O MAXIMO DOS SALARIOS DOS EMPREGADOS
SELECT MAX(E.SALARIO) FROM EMPREGADO E;
-- O MINIMO DOS SALARIOS DOS EMPREGADOS
SELECT MIN(E.SALARIO) FROM EMPREGADO E;
-- A SOMA TOTAL DOS SALARIOS DOS EMPREGADOS
SELECT SUM(E.SALARIO) FROM EMPREGADO E;

-- SELECIONAR O CPF DE TODOS OS EMPREGADOS QUE TRABALHAM NO MESMO PROJETO E COM A MESMA QUANTIDADE DE HORAS QUE O EMPREGADOS CUJO CPF É 1

SELECT DISTINCT CPFE FROM TRABALHA_EM 
WHERE (NUMPROJ, HORAS) IN -- O IN É PARA VERIFICAR SE O RESULTADO ESTA NA SUBCONSULTA
(SELECT NUMPROJ, HORAS FROM TRABALHA_EM WHERE CPFE = 1); 

-- SELECIONAR O NOME DE TODOS OS EMPREGADOS QUE TEM O SALARIO MAIOR DO QUE QUE TODOS OS EMPREGADOS DO DEPARTAMENTO 2
SELECT NOME FROM empregado WHERE salario > ALL (SELECT SALARIO FROM EMPREGADO WHERE NUMDEP = 2);